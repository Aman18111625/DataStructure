#include<stdio.h>
#include<stdlib.h>
struct Node;
struct QueueNode 
{
struct Node *ptr;
struct QueueNode *next;
};
struct QueueNode *queueStart;
struct QueueNode *queueEnd;
void addToQueue(struct Node *elem)
{
struct QueueNode *t;
t=(struct QueueNode *)malloc(sizeof(struct QueueNode));
t->ptr=elem;
t->next=NULL;
if(queueStart==NULL)
{
queueStart=t;
queueEnd=t;
}
else
{
queueEnd->next=t;
queueEnd=t;
}
}
struct Node *removeFromQueue()
{
struct QueueNode *t;
struct Node *elem;
t=queueStart;
queueStart=queueStart->next;
if(queueStart==NULL) queueEnd=NULL;
elem=t->ptr;
free(t);
return elem;
}
int isQueueEmpty()
{
return queueStart==NULL;
}
struct stackNode
{
struct Node *ptr;
struct stackNode *next;
};
struct stackNode *stackStart;
struct Node *elementAtTop()
{
return stackStart->ptr;
}
void push(struct Node *elem)
{
struct stackNode *t;
t=(struct stackNode *)malloc(sizeof(struct stackNode));
t->ptr=elem;
t->next=stackStart;
stackStart=t;
}
struct Node *pop()
{
struct Node *elem;
struct stackNode *t;
t=stackStart;
elem=t->ptr;
stackStart=stackStart->next;
free(t);
return elem;
}
int isEmpty()
{
return stackStart==NULL;
}
struct Node
{
int num;
struct Node *left,*right;
}; 
struct Node *start;
int Insert(int num)
{
struct Node *t,*j;
if(start==NULL)
{
t=(struct Node *)malloc(sizeof(struct Node ));
t->num=num;
t->left=NULL;
t->right=NULL;
start=t;
return 1;
}
j=start;
while(1)
{
if(num==j->num) return 0;
if(num<j->num)
{
if(j->left==NULL)
{
t=(struct Node *)malloc(sizeof(struct Node ));
t->num=num;
t->left=NULL;
t->right=NULL;
j->left=t;
break;
}
else j=j->left;
}
else
{
if(j->right==NULL)
{
t=(struct Node *)malloc(sizeof(struct Node ));
t->num=num;
t->left=NULL;
t->right=NULL;
j->right=t;
break;
}
else j=j->right;
}
}
return 1;
}
void TraverseInorderWithoutRecursion()
{
struct Node *t,*j;
if(start==NULL) 
{
printf("No element\n");
return ;
}
for(j=start;j!=NULL;j=j->left)
{
push(j);
}
while(!isEmpty())
{
t=pop();
printf("%d\n",t->num);
if(t->right!=NULL)
{
for(j=t->right;j!=NULL;j=j->right)
{
push(j);
}
}
}
}
void TraverseInorderUsingRecursion(struct Node *t)
{
if(t==NULL) return ;
TraverseInorderUsingRecursion(t->left);
printf("%d\n",t->num);
TraverseInorderUsingRecursion(t->right);
}
void TraversePreorderWithoutRecursion()
{
struct Node *t;
if(start==NULL) 
{
printf("No element\n");
return ;
}
t=start;
push(t);
while(!isEmpty())
{
t=pop();
printf("%d\n",t->num);
if(t->right!=NULL) push(t->right);
if(t->left!=NULL) push(t->left);
}
}
void TraversePreorderUsingRecursion(struct Node *t)
{
if(t==NULL) return ;
printf("%d\n",t->num);
TraversePreorderUsingRecursion(t->left);
TraversePreorderUsingRecursion(t->right);
}
void TraversePostorderWithoutRecursion()
{
struct Node *t;
if(start==NULL) return ;
t=start;
while(1)
{
while(t!=NULL)
{
if(t->right!=NULL) push(t->right);
push(t);
t=t->left;
}
t=pop();
if(!isEmpty()&&t->right!=NULL&&t->right==elementAtTop())
{
pop();
push(t);
t=t->right;
}
else
{
printf("%d\n",t->num);
t=NULL;
}
if(isEmpty()) break;
}
}
void TraversePostorderUsingRecursion(struct Node *t)
{
if(t==NULL) return;
TraversePostorderUsingRecursion(t->left);
TraversePostorderUsingRecursion(t->right);
printf("%d\n",t->num);
}
void TraverseLevelorderWithoutRecursion()
{
struct Node *t;
int insertionCount=1,j,x;
if(start==NULL)
{
printf("No element\n");
return ;
}
t=start;
addToQueue(t);
while(!isQueueEmpty())
{
j=1;
x=0;
while(j<=insertionCount)
{
t=removeFromQueue();
printf("%d\n",t->num);
if(t->left!=NULL) 
{
addToQueue(t->left);
x++;
}
if(t->right!=NULL)
{
addToQueue(t->right);
x++;
}
j++;
}
insertionCount=x;
}
}

int GetHeightofTreeWithoutRecursion()
{
struct Node *t;
int insertionCount=1,j,x,h=0;
if(start==NULL)
{
printf("No element\n");
return 0;
}
t=start;
addToQueue(t);
while(!isQueueEmpty())
{
j=1;
x=0;
h=h+1;
while(j<=insertionCount)
{
t=removeFromQueue();
if(t->left!=NULL) 
{
addToQueue(t->left);
x++;
}
if(t->right!=NULL)
{
addToQueue(t->right);
x++;
}
j++;
}
insertionCount=x;
}
return h;
}
int GetHeightofTreeUsingRecursion(struct Node *t)
{
int lch,rch;
if(t==NULL) return 0;
lch=GetHeightofTreeUsingRecursion(t->left);
rch=GetHeightofTreeUsingRecursion(t->right);
if(lch>rch) return (lch+1);
else return (rch+1);
}
int RemoveElem(int num)
{
struct Node *t,*j,*e,*f;
t=start;
while(t!=NULL)
{
if(num==t->num) break;
j=t;
if(num<t->num) t=t->left;
else t=t->right;
}
if(t==NULL) return 0;
if(t->left==NULL&&t->right==NULL)
{
if(t==start) start=NULL;
else if(t=j->left) j->left=NULL;
else j->right=NULL; 
free(t);
return 1;
}
if(t->right!=NULL)
{
for(e=t->right;e->left!=NULL;e=e->left) f=e;
if(t->right==e) e->left=t->left;
else
{
f->left=e->right;
e->right=t->right;
e->left=t->left;
}
if(start==t) start=e;
else if(j->left==t) j->left=e;
else j->right=e;
}
else
{
for(e=t->left;e->left!=NULL;e=e->right) f=e;
if(t->left==e) e->right=t->right;
else
{
f->right=e->left;
e->left=t->left;
e->right=t->right;
}
if(start==t) start=e;
else if(j->left==t) j->left=e;
else j->right=e;
}
free(t);
return 1;
}
int Search(int num)
{
struct Node *t;
t=start;
while(t!=NULL)
{
if(num==t->num) return 1;
else if(num<t->num) t=t->left;
else t=t->right;
}
if(t==NULL) return 0;
}
int main()
{
int ch,num;
start=NULL;
stackStart=NULL;
queueStart=NULL;
queueEnd=NULL;
while(1)
{
printf("1.Insert in BST\n");
printf("2.Traverse InOreder WithoutRecursion\n");
printf("3. Traverse InOreder using Recursion\n");
printf("4.Traverse PreOreder WithoutRecursion\n");
printf("5. Traverse PreOreder using Recursion\n");
printf("6.Traverse PostOreder WithoutRecursion\n");
printf("7. Traverse PostOreder using Recursion\n");
printf("8.Traverse LevelOreder WithoutRecursion\n");
printf("9. Traverse LevelOreder using Recursion\n");
printf("10.Get Height of Tree Without Recursion\n");
printf("11.Get Height of Tree Using Recursion\n");
printf("12.Remove\n");
printf("13.Search\n");
printf("14.Exit\n");
printf("Enter your choice:");
scanf("%d",&ch);
if(ch==1)
{
printf("Enter a number to insert in BST:");
scanf("%d",&num);
fflush(stdin);
if(Insert(num))
{
printf("%d inserterd in BST\n",num);
}
else
{
printf("%d already exist,hence not inserted in BST\n");
}
}
if(ch==2)
{
TraverseInorderWithoutRecursion();
}
if(ch==3)
{
TraverseInorderUsingRecursion(start);
}
if(ch==4)
{
TraversePreorderWithoutRecursion();
}
if(ch==5)
{
TraversePreorderUsingRecursion(start);
}
if(ch==6)
{
TraversePostorderWithoutRecursion();
}
if(ch==7)
{
TraversePostorderUsingRecursion(start);
}
if(ch==8)
{
TraverseLevelorderWithoutRecursion();
}

if(ch==10)
{
int x=GetHeightofTreeWithoutRecursion();
printf("Height of Tree:%d\n",x);
}
if(ch==11)
{
int x=GetHeightofTreeUsingRecursion(start);
printf("Height Of Tree:%d\n",x);
}
if(ch==12)
{
printf("Enter a number to remove from BST:");
scanf("%d",&num);
fflush(stdin);
if(RemoveElem(num))
{
printf("%d removed from BST\n",num);
}
else
{
printf("%d does not exists in BST\n",num);
}
}
if(ch==13)
{
printf("Enter a number to search:");
scanf("%d",&num);
fflush(stdin);
if(Search(num))
{
printf(" %d Found\n",num);
}
else
{
printf("%d not found in BST\n",num);
}
}
if(ch==14)
{
break;
}
}
return 0;
}